// utils/youtubeApi.js
class YouTubeAPI {
    constructor() {
      this.playerStates = {
        UNSTARTED: -1,
        ENDED: 0,
        PLAYING: 1,
        PAUSED: 2,
        BUFFERING: 3,
        CUED: 5
      };
    }
  
    /**
     * Get the current YouTube player instance
     */
    getPlayer() {
      const player = document.querySelector('#movie_player');
      if (!player) throw new Error('YouTube player not found');
      return player;
    }
  
    /**
     * Player control methods
     */
    playVideo() {
      this.getPlayer().playVideo();
    }
  
    pauseVideo() {
      this.getPlayer().pauseVideo();
    }
  
    togglePlayPause() {
      const player = this.getPlayer();
      if (player.getPlayerState() === this.playerStates.PLAYING) {
        player.pauseVideo();
      } else {
        player.playVideo();
      }
    }
  
    seekTo(seconds) {
      this.getPlayer().seekTo(seconds, true);
    }
  
    getCurrentTime() {
      return this.getPlayer().getCurrentTime();
    }
  
    getDuration() {
      return this.getPlayer().getDuration();
    }
  
    setVolume(volume) {
      this.getPlayer().setVolume(Math.max(0, Math.min(100, volume)));
    }
  
    getVolume() {
      return this.getPlayer().getVolume();
    }
  
    setPlaybackRate(rate) {
      this.getPlayer().setPlaybackRate(rate);
    }
  
    getPlaybackRate() {
      return this.getPlayer().getPlaybackRate();
    }
  
    /**
     * Quality control methods
     */
    async getAvailableQualities() {
      const player = this.getPlayer();
      return player.getAvailableQualityLevels();
    }
  
    setQuality(quality) {
      this.getPlayer().setPlaybackQuality(quality);
    }
  
    getCurrentQuality() {
      return this.getPlayer().getPlaybackQuality();
    }
  
    /**
     * Subtitle and caption methods
     */
    async getSubtitles() {
      const player = this.getPlayer();
      const trackList = player.getOption('captions', 'tracklist') || [];
      return trackList.map(track => ({
        id: track.languageCode,
        language: track.languageName,
        isAutoGenerated: track.kind === 'asr'
      }));
    }
  
    setSubtitle(languageCode) {
      const player = this.getPlayer();
      player.setOption('captions', 'track', { languageCode });
    }
  
    /**
     * Video information methods
     */
    getVideoData() {
      const player = this.getPlayer();
      return {
        videoId: player.getVideoData().video_id,
        title: player.getVideoData().title,
        author: player.getVideoData().author,
        isLive: player.getVideoData().isLive
      };
    }
  
    getPlayerState() {
      return this.getPlayer().getPlayerState();
    }
  
    /**
     * Event listeners
     */
    onStateChange(callback) {
      const player = this.getPlayer();
      player.addEventListener('onStateChange', callback);
    }
  
    onPlaybackRateChange(callback) {
      const player = this.getPlayer();
      player.addEventListener('onPlaybackRateChange', callback);
    }
  
    onError(callback) {
      const player = this.getPlayer();
      player.addEventListener('onError', callback);
    }
  
    /**
     * Playlist methods
     */
    async getPlaylist() {
      const player = this.getPlayer();
      return player.getPlaylist();
    }
  
    async getPlaylistIndex() {
      const player = this.getPlayer();
      return player.getPlaylistIndex();
    }
  
    nextVideo() {
      this.getPlayer().nextVideo();
    }
  
    previousVideo() {
      this.getPlayer().previousVideo();
    }
  
    /**
     * Advanced features
     */
    async captureFrame() {
      const player = this.getPlayer();
      const video = player.querySelector('video');
      
      const canvas = document.createElement('canvas');
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      
      const ctx = canvas.getContext('2d');
      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
      
      return canvas.toDataURL('image/jpeg');
    }
  
    /**
     * Player customization
     */
    setPlayerSize(width, height) {
      const player = this.getPlayer();
      player.setSize(width, height);
    }
  
    getPlayerSize() {
      const player = this.getPlayer();
      return {
        width: player.offsetWidth,
        height: player.offsetHeight
      };
    }
  }
  
  export default YouTubeAPI;